Some transcription My_program v 2.41.2
                                |  | |
                                |  | Patch
                                |  |
                                | Minor
                              Major
                                   
Given a version number MAJOR.MINOR.PATCH, increment the:
    MAJOR version when you make incompatible API changes;
    MINOR version when you add functionality in a backward compatible manner;
    PATCH version when you make backward compatible bug fixes;
Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.
More information --> https://semver.org/

Installation
    -Windows
        1. Download https://git-scm.com/download/win
        or use PowerShell:
             winget install --id Git.Git -e --source winget
        2. Install by default
        3. Check version
            in Git Bash console: git --version      / if you can see the version - Ok/
                                 git --help         / will provide you more information /


        You have an option:
                    -use Git Bash console
                    -use Terminal in Visual Studio Code (ctrl + ~)
                        *Anyway you have to use Linux commands like cd,ll, mkdir, etc

        4. Create a folder for your repository using cd, mkdir, etc. You may use windows explorer as well
                Example:
                    cd /d/Install/GIT
                    mkdir my_way; cd my_way            
        5. Initialisation the repository
                    git init        / Inside the folder my_way will be created the hidden folder .git /

        6. We have to set a username and email
                Example:
                    git config --global "Radik Makhmudov"
                    git config --global Radik.M@itbumper.com
                    git config --list / check global configuration /

        7. Start using

        The levels 
            1. Working directory
                -create a folder 
                -create a file and edit
                The first state of new folders and files are "Untracked"  / Folders - green dot, files marked "U" in file explorer" /   
                Example:
                    mkdir GIT; cd GIT
                    touch a0001_git
                    git status  /shows the current branch name, untracked files and folders /
                        $ On branch main
                        Your branch is up to date with 'origin/main'.
                        Untracked files:
                        (use "git add <file>..." to include in what will be committed)
                        GIT/
                        nothing added to commit but untracked files present (use "git add" to track)
                
            2. Staging area (index)  /files and folders --> .git/objects
                    Example:
                    git add GIT/    # We gonna add the whole directory named GIT
                    git status
                        $ On branch main
                        Your branch is up to date with 'origin/main'.
                        Changes to be committed:
                        (use "git restore --staged <file>..." to unstage)
                        new file:   GIT/a0001_git
                    Files marked "A" (Added) in file explorer
                    to add * folders and files use git add .

                If file was changed then
                    git status
                        $ On branch main
                        Your branch is up to date with 'origin/main'.
                        Changes to be committed:
                        (use "git restore --staged <file>..." to unstage)
                        new file:   GIT/a0001_git
                        Changes not staged for commit:
                        (use "git add <file>..." to update what will be committed)
                        (use "git restore <file>..." to discard changes in working directory)
                        modified:   GIT/a0001_git
                    Files marked "M" (Modifided) in file explorer
                    then do
                    git add /GIT or git add GIT/a0001_git   / status will change: "M" will become "A" /
           
            3. Repository   / files and folders --> .git/objects /
                Example:
                    git commit -m "07/22/2023"      
                        $ git commit -m "07/22/2023"
                        [main 436824f] 07/22/2023
                        1 file changed, 89 insertions(+)
                        create mode 100644 GIT/a0001_git

        How to:
            Excluding files
                Just add the file or folder name in the file .gitignore
                Example:
                    I created the file "dont_want_to_track" / Status: Untracked files -->only "dont_want_to_track"
                    In root directory create a file .gitignore, then add the filename "dont_want_to_track" in it. / Status: Untracked files--> only ".gitignore"
                    *If you want to exclude a folder then add /folder in the .gitignore
                    then do
                    git add .
                    git status   / -->new file:   .gitignore, the file "dont_want_to_track" doesn`t show anymore /
            
            Figure out in which branch you work
                Remember. There are two types of branches: local and remote. In the VSC, have a look at the left bottom corner (GIT label)
                Examples:
                    git branche     / shows current local branche /
                    $ git branch
                    * main

                    git branche - a / shows current remote branche /
                    $ git branch -a
                    * main
                      remotes/origin/main

            Create a new branche
                Two ways to create a new branche: using terminal and an APP. In the VSC, use tools hidden at the left bottom corner (GIT label)
                Example:
                    git branch New_Branch
                    git branch
                    $ git branch 
                     New_Branch     / just created branch /
                    * main          / * -means currently chosen branch / 
                If you want create a new branch and make it the current use this command:
                git checkout -b New_Branch
                Two ways to create a new branche: using terminal and an APP. In the VSC, use tools hidden at the left bottom corner (GIT label)

            To rename the current branch use: git branch -m new_branch_name

            Delete some branch
                Example:
                    git branch -D New_Branch
                    $ git branch -D New_Branch
                    Deleted branch New_Branch (was 3d3bc2d).
                Before deleting the branch, you have to set on to another branch. You can`t remove the current branch.
            Select branch
                Two ways to create a new branche: using terminal and an APP. In the VSC, use tools hidden at the left bottom corner (GIT label)
                Be aware. If you have modified files, decide in which branch you will commit to the current state.
                Example:
                    git checkout new_branch
                    $ git checkout new_branch
                    Switched to branch 'new_branch'
                    M       GIT/a0001_git

                The header is always set on the last commit in the branch. HEAD-->BRANCH-->THE_LAST_COMMIT

            Merge branch
                When you have completed development in your branch and everything works fine, the final step is merging the branch with the parent (main) branch. This is done with the git merge command.
                GIT merge basically intergrates your feature branch with all of its commits back to main branch.
                Be aware. Before doing a merge, you have to be on the main branch.
                Example:
                git checkout main
                git branch
                $ git branch
                * main              / the current branch is main = Ok /
                  new_branch
                git merge new_branch
                Merge made by the 'ort' strategy.
                .gitignore              | 2 +-
                Bash/Scripts/check_raid | 2 ++
                2 files changed, 3 insertions(+), 1 deletion(-)
                create mode 100644 Bash/Scripts/check_raid

                git log
                commit 42240c8bc689f25766cdb31b286519988b59b2fa (HEAD -> main)
                Merge: 7947760 68172ff
                Author: Radik.M <Radik.M@itbumper.com>
                Date:   Sun Jul 23 23:48:29 2023 -0700

                Merge branch 'new_branch'

                commit 68172ff47d176d53b1c14177ecdad1d7ba8248f7 (new_branch)
                Author: Radik.M <Radik.M@itbumper.com>
                Date:   Sun Jul 23 23:27:15 2023 -0700

                The first commit in the branch new_branch






Tracking status:
    -untracked
    -unmodified
    -modified
    -staged

Type of objects in GIT: (each object has a unique ID: hash-->sha1)
    -blob   / file /
    -tree   / folder /
    -commit / commit /
    -annotated tag  


    The commit refers to the tree
    Each commit has:
     -Author`s name and email address
     -Commit`s description
     -Parent(s) commit(s)   -->sha1
     -Tree                  -->sha1

    